using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <%= props.projectName %>.Infrastructure.Entities;

namespace <%= props.projectName %>.Infrastructure.EntityFrameworkDataAccess
{
    public class Context : DbContext
    {
        <% props.classTables.forEach(function(classTable, index){ %>
            public virtual DbSet<<%= classTable.name %>> <%= classTable.name %>s { get; set; }
        <% }); %>

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // set all decimal types with (10,2) precision
            foreach (var property in modelBuilder.Model.GetEntityTypes()
            .SelectMany(t => t.GetProperties())
            .Where(p => p.ClrType == typeof(decimal)))
            {
                property.Relational().ColumnType = "decimal(10, 2)";
            }
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseMySql("connectionUrl");
        }

        public override int SaveChanges()
        {
            AddTimestamps();
            return base.SaveChanges();
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            AddTimestamps();
            return (await base.SaveChangesAsync(true, cancellationToken));
        }

        public void ChangeEntryState(BaseEntity entity,
        EntityState state = EntityState.Detached)
        {
            if (entity != null)
            {
                Entry(entity).State = state;
            }
        }

        private void AddTimestamps()
        {
            var entities = ChangeTracker.Entries().Where(x => x.Entity is BaseEntity && (x.State == EntityState.Added || x.State == EntityState.Modified));

            foreach (var entity in entities)
            {
                var date = DateTime.UtcNow;
                date = date.AddTicks(-(date.Ticks % TimeSpan.TicksPerSecond));

                if (entity.State == EntityState.Added)
                {
                    ((BaseEntity)entity.Entity).CreatedAt = date;
                }

                ((BaseEntity)entity.Entity).UpdatedAt = date;
            }
        }

    }
}
