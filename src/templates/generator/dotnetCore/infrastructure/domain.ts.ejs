using System;
<% if(props.classTable.hasRelations && props.classTable.name != 'FileUpload') { %>
using System.Collections.Generic;
<% } %>

namespace <%= props.projectName %>.<%= props.classTable.name %>
{
    public sealed class <%= props.classTable.name %>
    {
        <% props.classTable.properties.forEach(function(property, index){ %>
            <% if (property.isForeignKey) { %> 
                public <%= property.foreign.table %>.<%= property.foreign.table %> <%= property.foreign.classProperty %> { get; private set; }

            <% } else if (property.type == 'enum') { %>
                private <%= property.enumType.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>;
                public <%= property.enumType.type %> <%= property.name %>
                {
                    get { return <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>; }
                    set { Set<%= property.name %>(value); }
                }
            <% } else {%>
                public <%= property.type %> <%= property.name %> { get; private set; }
            <% } %>
        <% }); %>

        
        <% if(props.classTable.hasRelations && props.classTable.name != 'FileUpload') { %>
                                
            <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                   
                <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 
                    private List<<%= tableRelation.firstMiddleTablePropety.foreign.table %>.<%= tableRelation.firstMiddleTablePropety.foreign.table %>> <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s;
                    public IReadOnlyCollection<<%= tableRelation.firstMiddleTablePropety.foreign.table %>.<%= tableRelation.firstMiddleTablePropety.foreign.table %>> <%= tableRelation.firstMiddleTablePropety.foreign.table %>s
                    {
                        get { return <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s; }
                    }
                    
                <% } else { %> 
                    private List<<%= tableRelation.secondMiddleTablePropety.foreign.table %>.<%= tableRelation.secondMiddleTablePropety.foreign.table %>> <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s;
                    public IReadOnlyCollection<<%= tableRelation.secondMiddleTablePropety.foreign.table %>.<%= tableRelation.secondMiddleTablePropety.foreign.table %>> <%= tableRelation.secondMiddleTablePropety.foreign.table %>s
                    {
                        get { return <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s; }
                    }
                <% } %>
            <% }); %>
        <% } %>


        public <%= props.classTable.name %>(
        <% props.classTable.properties.forEach(function(property, index){ %>
            <% if (property.isRequired) { %>  
                <% if(property.isForeignKey) { %> 
                    <%= property.foreign.table %>.<%= property.foreign.table %> 
                    <%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %> 
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } else if (property.isPrimaryKey && property.type == 'Guid') { %>
                    <%= property.type %><% if(property.type == 'DateTime' || property.type == 'Guid') { %>? <% } %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> 
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } else if (property.type == 'enum') { %> 
                    <%= property.enumType.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> 
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } else { %>
                    <%= property.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> 
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } %>
            <% } else { %>
                <% if(property.isForeignKey) { %> 
                    <%= property.foreign.table %>.<%= property.foreign.table %> 
                    <%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %> = null
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } else if (property.type == 'enum') { %> 
                    <%= property.enumType.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> = null
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } else { %>
                    <%= property.type %><% if(property.type == 'DateTime' || property.type == 'Guid') { %>? <% } %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> = null
                    <% if(index < props.classTable.properties.length - 1) { %>, <% } %>
                <% } %>
            <% } %>
        <% }); %>

        <% if(props.classTable.hasRelations && props.classTable.name != 'FileUpload') { %>
            <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                    
                <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 
                    , List<<%= tableRelation.firstMiddleTablePropety.foreign.table %>.<%= tableRelation.firstMiddleTablePropety.foreign.table %>> <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s = null
                    
                <% } else { %> 
                    , List<<%= tableRelation.secondMiddleTablePropety.foreign.table %>.<%= tableRelation.secondMiddleTablePropety.foreign.table %>> <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s = null
                <% } %>

            <% }); %>
        <% } %>
        )
        {
        <% props.classTable.properties.forEach(function(property){ %>
            <% if (property.isPrimaryKey && property.type == 'Guid') { %>
                <%= property.name %> = <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> ?? Guid.NewGuid();
            <% } else {%>   
                <% if(property.isForeignKey) { %> 
                    <%= property.foreign.classProperty %> =  <%= property.foreign.classProperty.toLowerCase() %>;
                <% } else if(!property.isRequired && property.type == 'DateTime'){ %>
                    <%= property.name %> = <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>.HasValue ? 
                    <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>.Value : default(DateTime);
                <% } else { %>
                    <%= property.name %> = <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>;
                <% } %>
            <% } %>   
        <% }); %>

         
        <% if(props.classTable.hasRelations  && props.classTable.name != 'FileUpload') { %>
                                
            <% props.classTable.tableRelations.forEach(function(tableRelation) { %>

                <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 
                    this.<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s =  
                    <%=tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s != null ?
                    <%=tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s : 
                    new List<<%=tableRelation.firstMiddleTablePropety.foreign.table %>.<%=tableRelation.firstMiddleTablePropety.foreign.table %>>();
                <% } else { %> 
                    this. <%=tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s =  
                    <%=tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s != null ?
                    <%=tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() +tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s : 
                    new List<<%=tableRelation.secondMiddleTablePropety.foreign.table %>.<%=tableRelation.secondMiddleTablePropety.foreign.table %>>();
                <% } %>

            <% }); %>
        <% } %>

        
        }
        
        <% props.classTable.properties.forEach(function(property){ %>
            <% if (property.hasChangeMethod) { %>
                
                <% if (property.type == 'bool') { %>
                    <% if (property.isForeignKey) { %> 
                        public void Set<%= property.foreign.classProperty %>(<%= property.foreign.table %>.<%= property.foreign.table %> 
                        <%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %>)
                    <% } else { %>
                        public void Set<%= property.name %>(<%= property.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>)
                    <% } %>
                <% } else if (property.type == 'enum') { %> 
                    public void Set<%= property.name %>(<%= property.enumType.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>)
                <% } else { %>
                    <% if (property.isForeignKey) { %> 
                        public void Change<%= property.foreign.classProperty %>(<%= property.foreign.table %>.<%= property.foreign.table %> 
                        <%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %>)
                    <% } else { %>
                        public void Change<%= property.name %>(<%= property.type %> <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>)
                    <% } %>
                <% } %>
            {
                <% if (property.isForeignKey) { %> 
                    <% if (property.type != 'bool') { %> 
                        if (<%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %> == null)
                            throw new ArgumentNullException("<%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %> cannot be null.");
                    <% } %>

                    <%= property.foreign.classProperty %> = <%= property.foreign.classProperty.charAt(0).toLowerCase() + property.foreign.classProperty.slice(1) %>;
                <% } else if (property.type == 'enum') { %> 

                    if (
                        <% property.enumType.value.split(',').forEach(function(val, i){ %>
                            !<%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>.Equals(Domain.<%= props.classTable.name %>.<%= property.name %>.<%= val.charAt(0).toUpperCase() + val.slice(1).toLowerCase() %>)
                            <% if(i < property.enumType.value.split(',').length - 1) { %> && <% } %>
                        <% }); %>
                    )
                    {
                        throw new ArgumentException("Invalid <%= property.name %>. Possible values: " +
                            <% property.enumType.value.split(',').forEach(function(val, i){ %>
                                $"{<%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>.Equals(Domain.<%= props.classTable.name %>.<%= property.name %>.<%= val.charAt(0).toUpperCase() + val.slice(1).toLowerCase() %>)} <% if(i + 2  < property.enumType.value.split(',').length - 1) { %>, <% } else if (i + 1  < property.enumType.value.split(',').length - 1){ %> AND <% } %> " 
                                <% if(i < property.enumType.value.split(',').length - 1) { %>+ <% }%>
                            <% }); %>
                        );
                    }
        
                    <%= property.name %> = <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>;

                <% } else { %>

                    <% if (property.type != 'bool') { %> 
                        if (<%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> == null)
                            throw new ArgumentNullException("<%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %> cannot be null.");
                    <% } %>

                    <%= property.name %> = <%= property.name.charAt(0).toLowerCase() + property.name.slice(1) %>;
                <% } %>
            }
            <% } %>
        <% }); %>

        
        <% if(props.classTable.hasRelations  && props.classTable.name != 'FileUpload') { %>
            <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                
                <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 

                    public void Add<%= tableRelation.firstMiddleTablePropety.foreign.table %>(
                        <%= tableRelation.firstMiddleTablePropety.foreign.table %>.<%= tableRelation.firstMiddleTablePropety.foreign.table %>  
                        <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>)
                    {
                        if (<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %> == null)
                            throw new ArgumentException("<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %> cannot be null", nameof(<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>));
        
                        <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s.Add(<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>);
                    }
        
                    public void Remove<%= tableRelation.firstMiddleTablePropety.foreign.table %>(Guid <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id)
                    {
                        if (<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id == null)
                            throw new ArgumentException("<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id cannot be null", nameof(<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id));
        
                        var index = <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s.FindIndex(
                            <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %> => 
                            <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>.Id.Equals(<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id));
        
                        if (index < 0)
                        {
                            throw new ArgumentNullException("Could not remove <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>", nameof(<%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>Id));
                        }
        
                        <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s.RemoveAt(index);
                    }
                    
                    public void RemoveAll<%= tableRelation.firstMiddleTablePropety.foreign.table %>s()
                    {
                        <%= tableRelation.firstMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.firstMiddleTablePropety.foreign.table.slice(1) %>s.Clear();
                    }

                <% } else { %> 
                    public void Add<%= tableRelation.secondMiddleTablePropety.foreign.table %>(
                        <%= tableRelation.secondMiddleTablePropety.foreign.table %>.<%= tableRelation.secondMiddleTablePropety.foreign.table %>  
                        <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>)
                    {
                        if (<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %> == null)
                            throw new ArgumentException("<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %> cannot be null", nameof(<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>));
        
                        <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s.Add(<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>);
                    }
        
                    public void Remove<%= tableRelation.secondMiddleTablePropety.foreign.table %>(Guid <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id)
                    {
                        if (<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id == null)
                            throw new ArgumentException("<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id cannot be null", nameof(<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id));
        
                        var index = <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s.FindIndex(
                            <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %> => 
                            <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>.Id.Equals(<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id));
        
                        if (index < 0)
                        {
                            throw new ArgumentNullException("Could not remove <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>", nameof(<%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>Id));
                        }
        
                        <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s.RemoveAt(index);
                    }
                    
                    public void RemoveAll<%= tableRelation.secondMiddleTablePropety.foreign.table %>s()
                    {
                        <%= tableRelation.secondMiddleTablePropety.foreign.table.charAt(0).toLowerCase() + tableRelation.secondMiddleTablePropety.foreign.table.slice(1) %>s.Clear();
                    }
                <% } %>
            
            <% }); %>
        <% } %>
    }
}
