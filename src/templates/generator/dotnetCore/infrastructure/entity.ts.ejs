using System;
<% if(props.classTable.hasRelations && !props.classTable.isMiddleTable) { %>
using System.Collections.Generic;
<% } %>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using <%= props.projectName %>.Infrastructure.Entities;

namespace <%= props.projectName %>.Infrastructure.Entities
{
    [Table("<%= props.classTable.tableName %>")]
    public sealed class <%= props.classTable.name %> : BaseEntity
    {
    <% props.classTable.properties.forEach(function(property){ %>
        
        <% if (!(property.name.toLowerCase() == 'id' && property.isPrimaryKey
            && property.type == 'Guid')) { %> 

            <% if (property.isForeignKey) { %> 
                public <%= property.foreign.table %> <%= property.foreign.classProperty %> { get; set; }

                
                [ForeignKey("<%= property.foreign.classProperty %>")] 
            <% } %>
        
            [Column("<%= property.columnName %>")]
            <% if (property.isRequired) { %>
                [Required] 
            <% }  %>

            <% if (property.type == 'enum') { %> 
                public <%= property.enumType.type %> <%= property.name %> { get; set; }
            <% } else { %>
                public <%= property.type %> <%= property.name %> { get; set; }
            <% }  %>
        
        <% } %>
    <% }); %>

    <% if(props.classTable.hasRelations && !props.classTable.isMiddleTable) { %>
        <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
            public IList<<%= tableRelation.name %>> <%= tableRelation.name %>s { get; set; }
        <% }); %>
    <% } %>

    }
}
