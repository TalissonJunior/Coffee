
namespace <%= props.projectName %>.Infrastructure.DapperDataAccess.Repositories
{
    public class <%= props.repositoryName %>Queries
    {
        <% var foreignProperties = props.classTable.properties.filter(p => p.isForeignKey) %>
        
        private static string Get => "SELECT " +

        <% props.classTable.properties.forEach(function(property, index){ %>
            <% if(index < props.classTable.properties.length - 1 && foreignProperties.length == 0) { %>
                " <%= props.classTable.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
            <% } else { %>
                
            " <%= props.classTable.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
            <% } %>
        <% }); %>

        <% if( foreignProperties.length > 0 ) { %>

            " " +

            <% foreignProperties.forEach(function(property){ %>
                <% var foreignTable = props.classTables.find(ct => ct.name == property.foreign.table) %>
                
                <% foreignTable.properties.forEach(function(foreinProperty, index){ %>
                    <% if(index < foreignTable.properties.length - 1 || props.classTable.hasRelations) { %>
                     " t_<%= property.foreign.classProperty.toLowerCase() %>.<%= foreinProperty.columnName %> AS <%= foreinProperty.name %>, " +
                    <% } else { %>
                        " t_<%= property.foreign.classProperty.toLowerCase() %>.<%= foreinProperty.columnName %> AS <%= foreinProperty.name %> " + 
                    <% } %>
                <% }); %>
            <% }); %>
            
            <% if(props.classTable.hasRelations) { %>
                " " +

                <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                    
                    <% tableRelation.properties.forEach(function(property, index){ %>

                        <% if(index < tableRelation.properties.length - 1) { %>
                            " <%= tableRelation.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                        <% } else { %>
                            
                            " <%= tableRelation.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                        <% } %>

                    <% }); %>

                    " " + 

                    <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 
                        <% var table = props.classTables.find(ct => ct.name == tableRelation.firstMiddleTablePropety.foreign.table) %>
                        
                        <% table.properties.forEach(function(property, index){ %>
                            <% if(index < table.properties.length - 1) { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                            <% } else { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                            <% } %>
                        <% }); %>

                    <% } else { %> 
                        <% var table = props.classTables.find(ct => ct.name == tableRelation.secondMiddleTablePropety.foreign.table) %>
                        
                        <% table.properties.forEach(function(property, index){ %>
                            <% if(index < table.properties.length - 1) { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                            <% } else { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                            <% } %>
                        <% }); %>
                        
                    <% } %>

                <% }); %>
            <% } %>
            
            " " +
            " " +
            
            " FROM <%= props.classTable.tableName %> " + 

            <% foreignProperties.forEach(function(property){ %>
                <% var foreignTable = props.classTables.find(ct => ct.name == property.foreign.table) %>
                <% var currentProperty = props.classTable.properties.find(p => p.name == property.foreign.tableColumn) %>
                
                " JOIN <%= foreignTable.tableName %> AS t_<%= property.foreign.classProperty.toLowerCase() %>" +
                " ON <%= props.classTable.tableName %>.<%= property.columnName %> =  t_<%= property.foreign.classProperty.toLowerCase() %>.<%=currentProperty.columnName %>"
                <% if(props.classTable.hasRelations) { %> +  <% } %>
                
            <% }); %>

            <% if(props.classTable.hasRelations) { %>
                <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                    " JOIN <%= tableRelation.tableName %> " + 

                    <% if (tableRelation.firstMiddleTablePropety.foreign.table == props.classTable.name) { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.firstMiddleTablePropety.foreign.tableColumn) %>

                        " ON <%= props.classTable.tableName %>.<%=currentProperty.columnName %> = <%= tableRelation.tableName %>.<%= tableRelation.firstMiddleTablePropety.columnName %> " + 

                        <% var table = props.classTables.find(ct => ct.name == tableRelation.secondMiddleTablePropety.foreign.table) %>
                        <% var currentForeignProperty = props.classTable.properties.find(p => p.name == tableRelation.secondMiddleTablePropety.foreign.tableColumn) %>

                        " JOIN <%= table.tableName %> " + 
                        " ON <%= tableRelation.tableName %>.<%= tableRelation.secondMiddleTablePropety.columnName %> = <%= table.tableName %>.<%= currentForeignProperty.columnName %> "

                    <% } else { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.secondMiddleTablePropety.foreign.tableColumn) %>

                        " ON <%= props.classTable.tableName %>.<%=currentProperty.columnName %> = <%= tableRelation.tableName %>.<%= tableRelation.secondMiddleTablePropety.columnName %> " +
                        
                        <% var table = props.classTables.find(ct => ct.name == tableRelation.firstMiddleTablePropety.foreign.table) %>
                        <% var currentForeignProperty = props.classTable.properties.find(p => p.name == tableRelation.firstMiddleTablePropety.foreign.tableColumn) %>

                        " JOIN <%= table.tableName %> " + 
                        " ON <%= tableRelation.tableName %>.<%= tableRelation.firstMiddleTablePropety.columnName %> = <%= table.tableName %>.<%= currentForeignProperty.columnName %> "
                        
                    <% } %>

                <% }); %>
            <% } %>
            ;

        <% } else { %>
            
            <% if(props.classTable.hasRelations) { %>
                " " +

                <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                    
                    <% tableRelation.properties.forEach(function(property, index){ %>

                        <% if(index < tableRelation.properties.length - 1) { %>
                            " <%= tableRelation.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                        <% } else { %>
                            
                            " <%= tableRelation.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                        <% } %>

                    <% }); %>

                    
                    " " + 

                    <% if (tableRelation.firstMiddleTablePropety.foreign.table != props.classTable.name) { %> 
                        <% var table = props.classTables.find(ct => ct.name == tableRelation.firstMiddleTablePropety.foreign.table) %>
                        
                        <% table.properties.forEach(function(property, index){ %>
                            <% if(index < table.properties.length - 1) { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                            <% } else { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                            <% } %>
                        <% }); %>

                    <% } else { %> 
                        <% var table = props.classTables.find(ct => ct.name == tableRelation.secondMiddleTablePropety.foreign.table) %>
                        
                        <% table.properties.forEach(function(property, index){ %>
                            <% if(index < table.properties.length - 1) { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %>, " +
                            <% } else { %>
                                " <%= table.tableName %>.<%= property.columnName %> AS <%= property.name %> " +
                            <% } %>
                        <% }); %>
                        
                    <% } %>

                <% }); %>

                " " + 
                " " +

            <% } %>

            " FROM <%= props.classTable.tableName %> " 
            <% if(props.classTable.hasRelations) { %> + <% } %>

            <% if(props.classTable.hasRelations) { %>
                <% props.classTable.tableRelations.forEach(function(tableRelation) { %>
                    " JOIN <%= tableRelation.tableName %> " + 
                   
                    <% if (tableRelation.firstMiddleTablePropety.foreign.table == props.classTable.name) { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.firstMiddleTablePropety.foreign.tableColumn) %>

                        " ON <%= props.classTable.tableName %>.<%=currentProperty.columnName %> = <%= tableRelation.tableName %>.<%= tableRelation.firstMiddleTablePropety.columnName %> " +
                    <% } else { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.secondMiddleTablePropety.foreign.tableColumn) %>

                        " ON <%= props.classTable.tableName %>.<%=currentProperty.columnName %> = <%= tableRelation.tableName %>.<%= tableRelation.secondMiddleTablePropety.columnName %> " +
                    <% } %>

                    <% if (tableRelation.firstMiddleTablePropety.foreign.table == props.classTable.name) { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.firstMiddleTablePropety.foreign.tableColumn) %>

                        <% var table = props.classTables.find(ct => ct.name == tableRelation.secondMiddleTablePropety.foreign.table) %>
                        <% var currentForeignProperty = props.classTable.properties.find(p => p.name == tableRelation.secondMiddleTablePropety.foreign.tableColumn) %>

                        " JOIN <%= table.tableName %> " + 
                        " ON <%= tableRelation.tableName %>.<%= tableRelation.secondMiddleTablePropety.columnName %> = <%= table.tableName %>.<%= currentForeignProperty.columnName %> "

                    <% } else { %> 
                        <% var currentProperty = props.classTable.properties.find(p => p.name == tableRelation.secondMiddleTablePropety.foreign.tableColumn) %>

                        <% var table = props.classTables.find(ct => ct.name == tableRelation.firstMiddleTablePropety.foreign.table) %>
                        <% var currentForeignProperty = props.classTable.properties.find(p => p.name == tableRelation.firstMiddleTablePropety.foreign.tableColumn) %>

                        " JOIN <%= table.tableName %> " + 
                        " ON <%= tableRelation.tableName %>.<%= tableRelation.firstMiddleTablePropety.columnName %> = <%= table.tableName %>.<%= currentForeignProperty.columnName %> "
                        
                    <% } %>

                <% }); %>
            <% } %>
            ;
        <% } %>


        public static string GetAll => Get ;

        <% var primaryProperty = props.classTable.properties.find(p => p.isPrimaryKey) %>

        <% if(primaryProperty != null) { %>
        public static string GetByKey => Get + @"
            WHERE <%= props.classTable.tableName %>.<%= primaryProperty.columnName %> = @id";
        <% } %>
    }
}
