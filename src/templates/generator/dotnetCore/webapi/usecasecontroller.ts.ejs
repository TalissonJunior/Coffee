using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Sieve.Models;
using <%= props.projectName %>.Application.UseCases.<%= props.usecaseName %>;

<% if (props.methodType == 'PUT' || props.methodType == 'POST') { %> 
    using <%= props.projectName %>.Application.Inputs;
<% } %>

namespace <%= props.projectName %>.WebApi.UseCases.<%= props.usecaseName %>
{
    [Route("api/[controller]")]
    public sealed class <%= props.classTable.name %>Controller : ControllerBase
    {
        private readonly I<%= props.usecaseName %>UseCase <%= props.usecaseName.charAt(0).toLowerCase() + props.usecaseName.slice(1) %>UseCase;
        private readonly Presenter presenter;

        public <%= props.classTable.name %>Controller(I<%= props.usecaseName %>UseCase <%= props.usecaseName.charAt(0).toLowerCase() + props.usecaseName.slice(1) %>UseCase,
            Presenter presenter)
        {
            this.<%= props.usecaseName.charAt(0).toLowerCase() + props.usecaseName.slice(1) %>UseCase = <%= props.usecaseName.charAt(0).toLowerCase() + props.usecaseName.slice(1) %>UseCase;
            this.presenter = presenter;
        }

        /// <summary>
        /// Gets a specific <%= props.classTable.name %> by unique id
        /// </summary>
        <% if (props.methodType == 'GET' && props.isList) { %> 
        /// <param name="sieveModel"></param>
        <% } %>
        <% if (props.methodType == 'PUT' || props.methodType == 'POST') { %> 
        /// <param name="input"></param>
        <% } %>
        /// <response code="200"><%= props.classTable.name %> retrieved</response>
        /// <response code="404"><%= props.classTable.name %> not found</response>
        /// <response code="500">Oops! Can't find your <%= props.classTable.name %> right now</response>
        /// <returns><%= props.classTable.name %></returns>
        [Http<%= props.methodType.charAt(0).toUpperCase() + props.methodType.slice(1).toLowerCase() %>   <% if (props.route) { %> ("<%= props.route %>")  <% } %>]
        public async Task<IActionResult> <%= props.usecaseName %>(
            <% if (props.methodType == 'GET' && props.isList) { %> 
                SieveModel sieveModel
            <% } else if (props.methodType == 'PUT' || props.methodType == 'POST') { %> 
                [FromBody] <%= props.classTable.name %>Input input
            <% } %>
        )
        {
            try
            {
                var output = await <%= props.usecaseName.charAt(0).toLowerCase() + props.usecaseName.slice(1) %>UseCase.Execute(
                    <% if (props.methodType == 'PUT' || props.methodType == 'POST') { %> 
                        input
                    <% } %>
                );
                
                <% if (props.methodType == 'GET' && props.isList) { %> 
                    presenter.Populate(output, sieveModel);
                <% } else {  %>
                    presenter.Populate(output);
                <% } %>

                return presenter.ViewModel;
            }
            catch (Exception e)
            {
                presenter.Populate(e);
                return presenter.ViewModel;
            }
        }
    }
}